{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "CoralogixRegion": {
      "type": "string",
      "defaultValue": "Europe",
      "allowedValues": [
        "Europe(eu-west-1)",
        "US(us-east-2)",
        "US2(us-west-2)",
        "Europe2(eu-north-1)",
        "India(ap-south-1)",
        "Singapore(ap-southeast-1)",
        "Custom"
      ],
      "metadata": {
        "description": "The region of the Coralogix account."
      }
    },
    "CustomURL": {
      "type": "string",
      "defaultValue": "https://<CustomURL>/api/v1/logs",
      "metadata": {
        "description": "Your Custom URL for the Coralogix account. Ignore unless you have a custom URL."
      }
    },
    "CoralogixPrivateKey": {
      "type": "string",
      "metadata": {
        "description": "The private key of the Coralogix account."
      }
    },
    "CoralogixApplication": {
      "type": "string",
      "metadata": {
        "description": "The name of the Application in Coralogix."
      }
    },
    "CoralogixSubsystem": {
      "type": "string",
      "metadata": {
        "description": "The name of the Subsystem in Coralogix."
      }
    },
    "StorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "The name of the storage account containing the Blob container. Must be of type StorageV2 (general purpose v2)"
      }
    },
    "StorageAccountResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "The resource group name of the storage account containing the Blob container."
      }
    },
    "BlobContainerName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Blob container."
      }
    },
    "EventGridSystemTopicName": {
      "type": "string",
      "defaultValue": "new",
      "metadata": {
        "description": "The name of an existing Event Grid System Topic for the storage account containing the blob container, or leave as 'new' to create one."
      }
    },
    "NewlinePattern": {
      "type": "string",
      "defaultValue": "(?:\\r\\n|\\r|\\n)",
      "metadata": {
        "description": "The pattern that separates the lines in the blob."
      }
    },
    "PrefixFilter": {
      "type": "string",
      "defaultValue": "NoFilter",
      "metadata": {
        "description": "The prefix filter to apply to the blob container. Use 'NoFilter' to not filter by prefix. Wildcards are not allowed. Use the following format '/subfolder1/subfolder2/'."
      }
    },
    "SuffixFilter": {
      "type": "string",
      "defaultValue": "NoFilter",
      "metadata": {
        "description": "The suffix filter to apply to the blob container. Use 'NoFilter' to not filter by suffix. Wildcards are not allowed. Use the following format '.log'."
      }
    },
    "FunctionAppServicePlanType": {
      "type": "string",
      "defaultValue": "Consumption",
      "allowedValues": [
        "Consumption",
        "Premium"
      ],
      "metadata": {
        "description": "The type of the Function App Service Plan. Choose Premium if you need vNet Support."
      }
    }
  },
  "variables": {
    "CoralogixURL": "[if(equals(parameters('CoralogixRegion'), 'Custom'), parameters('CustomURL'), if(equals(parameters('CoralogixRegion'), 'Europe(eu-west-1)'), 'https://ingress.coralogix.com/api/v1/logs', if(equals(parameters('CoralogixRegion'), 'US(us-east-2)'), 'https://ingress.coralogix.us/api/v1/logs', if(equals(parameters('CoralogixRegion'), 'US2(us-west-2)'), 'https://ingress.cx498.coralogix.com/api/v1/logs', if(equals(parameters('CoralogixRegion'), 'Europe2(eu-north-1)'), 'https://ingress.eu2.coralogix.com/api/v1/logs', if(equals(parameters('CoralogixRegion'), 'India(ap-south-1)'), 'https://ingress.coralogix.in/api/v1/logs', if(equals(parameters('CoralogixRegion'), 'Singapore(ap-southeast-1)'), 'https://ingress.coralogixsg.com/api/v1/logs', 'NULL')))))))]",
    "functionAppName": "[format('BlobStorage-{0}', uniqueString(concat(resourceGroup().id, parameters('StorageAccountName'), parameters('BlobContainerName'))))]",
    "functionAppResourceGroupName": "[resourceGroup().name]",
    "functionAppLocation": "[resourceGroup().location]",
    "hostingPlanName": "[variables('functionAppName')]",
    "applicationInsightsName": "[variables('functionAppName')]",
    "functionStorageAccountName": "[format('{0}azfunctions', uniqueString(resourceGroup().id))]",
    "needEventGrid": "[if(equals(parameters('EventGridSystemTopicName'), 'new'), 'true', 'false')]",
    "eventGridTopicName": "[if(equals(parameters('EventGridSystemTopicName'), 'new'), format('{0}-eg', parameters('storageAccountName')), parameters('EventGridSystemTopicName'))]",
    "packageUri": "https://coralogix-public.s3.eu-west-1.amazonaws.com/azure-functions-repo/BlobViaEventGrid.zip",
    "sku": "[if(equals(parameters('FunctionAppServicePlanType'), 'Consumption'), 'Y1', 'EP1')]",
    "PrefixFilter": "[if(equals(parameters('PrefixFilter'), 'NoFilter'), '', concat('/blobServices/default/containers/', parameters('BlobContainerName'), '/blobs', parameters('PrefixFilter')))]"  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-05-01",
      "name": "[variables('functionStorageAccountName')]",
      "location": "[variables('functionAppLocation')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "Storage"
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-03-01",
      "name": "[variables('hostingPlanName')]",
      "location": "[variables('functionAppLocation')]",
      "sku": {
        "name": "[variables('sku')]",
        "tier": "[if(equals(parameters('FunctionAppServicePlanType'), 'Consumption'), 'Dynamic', 'ElasticPremium')]"
      },
      "properties": {
        "reserved": true
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('applicationInsightsName')]",
      "location": "[variables('functionAppLocation')]",
      "tags": {
        "[format('hidden-link:{0}', resourceId('Microsoft.Web/sites', variables('applicationInsightsName')))]": "Resource"
      },
      "properties": {
        "Application_Type": "web"
      },
      "kind": "web"
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-03-01",
      "name": "[variables('functionAppName')]",
      "location": "[variables('functionAppLocation')]",
      "kind": "functionapp,linux",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "siteConfig": {
          "linuxFxVersion": "Node|18",
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2020-02-02').InstrumentationKey]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('functionStorageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('functionStorageAccountName')), '2021-09-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('functionStorageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('functionStorageAccountName')), '2021-09-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('functionAppName'))]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "node"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "[variables('packageUri')]"
            },
            {
              "name": "CORALOGIX_PRIVATE_KEY",
              "value": "[parameters('CoralogixPrivateKey')]"
            },
            {
              "name": "CORALOGIX_APP_NAME",
              "value": "[parameters('CoralogixApplication')]"
            },
            {
              "name": "CORALOGIX_SUB_SYSTEM",
              "value": "[parameters('CoralogixSubsystem')]"
            },
            {
              "Name": "CORALOGIX_URL",
              "Value": "[variables('CoralogixURL')]"
            },
            {
              "name": "BLOB_STORAGE_ACCOUNT_CONNECTION_STRING",
              "value": "[Concat('DefaultEndpointsProtocol=https;AccountName=',parameters('StorageAccountName'),';AccountKey=',listKeys(resourceId(parameters('StorageAccountResourceGroup'), 'Microsoft.Storage/storageAccounts', parameters('StorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value,';EndpointSuffix=core.windows.net')]"
            },
            {
              "name": "NEWLINE_PATTERN",
              "value": "[parameters('NewlinePattern')]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]",
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('functionStorageAccountName'))]"
      ]
    },
    {
      "name": "SubscriptionDeployment",
      "resourceGroup": "[parameters('StorageAccountResourceGroup')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "outer"
        },
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "type": "Microsoft.EventGrid/systemTopics",
              "condition": "[equals(variables('needEventGrid'), 'true')]",
              "apiVersion": "2021-12-01",
              "name": "[variables('eventGridTopicName')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "source": "[resourceId(parameters('StorageAccountResourceGroup'), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "topicType": "Microsoft.Storage.StorageAccounts"
              }
            },
            {
              "type": "Microsoft.EventGrid/systemTopics/eventSubscriptions",
              "apiVersion": "2022-06-15",
              "name": "[format('{0}/{1}-{2}', variables('eventGridTopicName'), variables('functionAppName'), uniqueString(concat(variables('functionAppName'), variables('functionAppResourceGroupName'))))]",
              "dependsOn": [
                  "[resourceId(parameters('StorageAccountResourceGroup'), 'Microsoft.EventGrid/systemTopics', variables('eventGridTopicName'))]"
              ],
              "properties": {
                  "destination": {
                      "properties": {
                          "resourceId": "[concat(resourceId(variables('functionAppResourceGroupName'), 'Microsoft.Web/sites', variables('functionAppName')), '/functions/BlobViaEventGrid')]",
                          "maxEventsPerBatch": 1,
                          "preferredBatchSizeInKilobytes": 64
                      },
                      "endpointType": "AzureFunction"
                  },
                  "filter": {
                      "includedEventTypes": [
                          "Microsoft.Storage.BlobCreated"
                      ],
                      "enableAdvancedFilteringOnArrays": true,
                      "subjectBeginsWith": "[if(equals(variables('PrefixFilter'), 'NoFilter'), '', variables('PrefixFilter'))]",
                      "subjectEndsWith": "[if(equals(parameters('SuffixFilter'), 'NoFilter'), '', parameters('SuffixFilter'))]"
                      },
                  "labels": [
                      "functions-blobviaeventgrid"
                  ],
                  "eventDeliverySchema": "EventGridSchema",
                  "retryPolicy": {
                      "maxDeliveryAttempts": 30,
                      "eventTimeToLiveInMinutes": 1440
                  }
              }
            }
          ],
          "outputs": {}
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
      ]
    }
  ]
}
